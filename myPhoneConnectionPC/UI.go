package main

import (
	"encoding/base64"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
	"github.com/getlantern/systray"
)

//ter uma goroutine que fica perguntando por novas imagens
//meter isto a funfar por paginas nao scroll infinito

var mainApp fyne.App
var mainWindow fyne.Window
var imageGallery *fyne.Container
var loadingPhotos bool
var cacheImages []*canvas.Image
var imgOffset int
var all_images_len int
var number_of_images int

func add_cache_images(img_bytes string) { //add_cache_images runs instantly
	log.Println("add_cache_images")
	img_arr := strings.Split(img_bytes, "//DIVIDER//")
	img_arr = img_arr[:len(img_arr)-1]

	for _, img64 := range img_arr {
		img64r := strings.Replace(img64, "//DIVIDER//", "", 1)

		img, _ := base64.StdEncoding.DecodeString(img64r)
		imgDecompressed, _ := decompressData(img)

		number_of_images++
		all_images_len += len(imgDecompressed)

		newImg := canvas.NewImageFromResource(fyne.NewStaticResource("image", imgDecompressed))
		if newImg == nil {
			fmt.Println("newImg is nil")
			continue
		}
		newImg.FillMode = canvas.ImageFillContain
		newImg.SetMinSize(fyne.NewSize(150, 150))
		cacheImages = append(cacheImages, newImg)
	}
	log.Println("add_cache_images done")
}

func show_new_images_array() {
	if loadingPhotos {
		fmt.Printf("Loading photos\n")
		return
	}

	loadingPhotos = true
	fmt.Println("show_new_image")
	imageGallery.RemoveAll()

	batch := 25
	if imgOffset+batch > len(cacheImages) {
		batch = len(cacheImages) - imgOffset
	}

	// Use Append to add images in one batch
	imagesToAdd := make([]fyne.CanvasObject, 0, batch)
	for i := imgOffset; i < imgOffset+batch; i++ {
		imagesToAdd = append(imagesToAdd, cacheImages[i])
	}
	imageGallery.Objects = append(imageGallery.Objects, imagesToAdd...)

	imgOffset += batch
	imageGallery.Refresh()
	fmt.Println("show_new_image done")
	loadingPhotos = false
}

func add_new_images() {
	if !ws.isConnectionAlive() {
		return
	}

	fmt.Printf("Adding image\n")
	ws.sendData("askImages")
}

func createUI() {
	imgOffset = 0
	loadingPhotos = false
	// Create a channel to handle OS signals for clean exit
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	// Initialize Fyne app
	mainApp = app.New()
	mainWindow = mainApp.NewWindow("Fyne App with Systray")

	imageGallery = container.NewGridWithColumns(5)

	button := widget.NewButton("get length of images", func() {
		fmt.Println("number_of_images:", number_of_images)
		fmt.Println("all_images_len:", all_images_len)
		fmt.Println("cacheImages:", len(cacheImages))
	})
	buttonLeft := widget.NewButton("Clear Image", func() {
		imageGallery.RemoveAll()
	})
	buttonRight := widget.NewButton("Load Image", func() {
		show_new_images_array()
	})

	buttonCache := widget.NewButton("Cache Image", func() {
		go add_new_images()
	})

	// Create a container with label and button widgets
	content := container.NewVBox(
		button,
		buttonLeft,
		buttonRight,
		buttonCache,
		imageGallery,
	)

	// Set the content of the window
	mainWindow.SetContent(content)

	mainWindow.SetCloseIntercept(func() {
		mainWindow.Hide()
	})

	go func() {
		systray.Run(onReady, onExit)
	}()

	mainWindow.Resize(fyne.NewSize(1000, 1000))
	mainWindow.ShowAndRun()
}

// Called when systray is ready
func onReady() {
	systray.SetIcon(iconData)
	systray.SetTitle("Fyne App")
	systray.SetTooltip("Fyne App Running in Background")

	mShow := systray.AddMenuItem("Show", "Show the application window")
	mQuit := systray.AddMenuItem("Quit", "Quit the application")

	go func() {
		for {
			select {
			case <-mShow.ClickedCh:
				mainWindow.Show()
			case <-mQuit.ClickedCh:
				mainApp.Quit()
			}
		}
	}()
}

// Called when systray is about to exit
func onExit() {
	fmt.Println("Systray exiting")
}

var iconData = []byte{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x06, 0x00, 0x00, 0x00, 0xAA, 0x69, 0x71,
	0xDE, 0x00, 0x00, 0x01, 0x1E, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0xED, 0x9A, 0x41, 0x0E, 0x83,
	0x30, 0x0C, 0x04, 0x9B, 0xAA, 0xFF, 0xFF, 0x72, 0x38, 0x21, 0xE5, 0x50, 0x10, 0x92, 0x77, 0x3D,
	0x12, 0xD9, 0xB9, 0xB6, 0xC4, 0x9B, 0x89, 0x53, 0x54, 0xC2, 0x98, 0x73, 0xCE, 0xCF, 0xC6, 0x7C,
	0xE9, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A, 0x00, 0x4D, 0x04, 0xD0, 0x01, 0x68,
	0x22, 0x80, 0x0E, 0x40, 0x13, 0x01, 0x74, 0x00, 0x9A, 0x08, 0xA0, 0x03, 0xD0, 0x44, 0x00, 0x1D,
	0x80, 0x26, 0x02, 0xE8, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A, 0x00, 0x4D, 0x04,
	0xD0, 0x01, 0x68, 0x22, 0x80, 0x0E, 0x40, 0x13, 0x01, 0x74, 0x00, 0x9A, 0x08, 0xA0, 0x03, 0xD0,
	0x44, 0x00, 0x1D, 0x80, 0x26, 0x02, 0xE8, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A,
	0x00, 0x4D, 0x04, 0xD0, 0x01, 0x68, 0x22, 0x80, 0x0E, 0x40, 0x13, 0x01, 0x74, 0x00, 0x9A, 0x08,
	0xA0, 0x03, 0xD0, 0x44, 0x00, 0x1D, 0x80, 0x26, 0x02, 0xE8, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0,
	0x89, 0x00, 0x3A, 0x00, 0x4D, 0x04, 0xD0, 0x01, 0x68, 0x22, 0x80, 0x0E, 0x40, 0x13, 0x01, 0x74,
	0x00, 0x9A, 0x08, 0xA0, 0x03, 0xD0, 0x44, 0x00, 0x1D, 0x80, 0x26, 0x02, 0xE8, 0x00, 0x34, 0x11,
	0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A, 0x00, 0x4D, 0x04, 0xD0, 0x01, 0x68, 0x22, 0x80, 0x0E, 0x40,
	0x13, 0x01, 0x74, 0x00, 0x9A, 0x08, 0xA0, 0x03, 0xD0, 0x44, 0x00, 0x1D, 0x80, 0x26, 0x02, 0xE8,
	0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A, 0x00, 0x4D, 0x04, 0xD0, 0x01, 0x68, 0x22,
	0x80, 0x0E, 0x40, 0x13, 0x01, 0x74, 0x00, 0x9A, 0x08, 0xA0, 0x03, 0xD0, 0x44, 0x00, 0x1D, 0x80,
	0x26, 0x02, 0xE8, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A, 0x00, 0x4D, 0x04, 0xD0,
	0x01, 0x68, 0x22, 0x80, 0x0E, 0x40, 0x13, 0x01, 0x74, 0x00, 0x9A, 0x08, 0xA0, 0x03, 0xD0, 0x44,
	0x00, 0x1D, 0x80, 0x26, 0x02, 0xE8, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89, 0x00, 0x3A, 0x00,
	0x4D, 0x04, 0xD0, 0x01, 0x68, 0x22, 0x80, 0x0E, 0x40, 0x13, 0x01, 0x74, 0x00, 0x9A, 0x08, 0xA0,
	0x03, 0xD0, 0x44, 0x00, 0x1D, 0x80, 0x26, 0x02, 0xE8, 0x00, 0x34, 0x11, 0x40, 0x07, 0xA0, 0x89,
	0x00, 0x3A, 0x00, 0x4D, 0x04, 0xD0, 0x01, 0x68, 0x22}
